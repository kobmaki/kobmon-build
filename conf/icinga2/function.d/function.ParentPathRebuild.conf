#
# (c) Uwe Ebel (kobmaki)
# License: GPLv2
# https://github.com/kobmaki/kobmon-build/
# 

# https://www.icinga.com/2016/08/11/analyse-icinga-2-problems-using-the-console-api/
# issue 10413
# Iterate over all Hosts
# Iterate of Dependency
include "namespace.KobUtil.conf"

if (! KobUtil.contains("HasIntersection")){
  include "function.HasIntersection.conf"
}


if (!KobUtil.contains("ParentPathRebuild")){

#
# Build the parent path
# Return stats infos
#  

KobUtil.ParentPathRebuild = function(TYPE){
    
    log("Start ParentPathRebuild() for "+TYPE.name); // info of rebuild start
    var aStartTime=get_time(); // starting time of the function
#    var host_parents=TYPE.name+"_parents"
#    var host_parent_path=TYPE.name+"_host_parent_path"
    var res = []; // contains the attached hosts
    var roots = []; // what are the parent root entries

    # initialize required structure
    for ( h in get_objects(TYPE)) {
    	h.vars.host_parent_path=""; // default is the parent path empty

	if (h.vars.host_parents){
	    h.vars.host_parents-=[""]; // remove invalid parents ""
	}

	 if ( ! h.vars.host_parents ) { // no parents -> parent entry point is a root
	   roots.add(h.name); // is a root object
	   res.add(h.name) ; // add the name to the attached hosts
        };
    };

    log ("ParentPathRebuild() "+TYPE.name+" parent root entry points:"+roots.len()); // info of how many root entries exist

    var notFinish = true; // default not finished
    
    while ( notFinish) {
	notFinish=false; // guess that we are finished
        for ( h in get_objects(TYPE)) {
#	    if ( ( h.vars.host_parent_path.len() == 0 ) && intersection(h.vars.host_parents, res ) ) {
	    if ( ( ! h.vars.host_parent_path ) && KobUtil.HasIntersection(h.vars.host_parents, res ) ) {
	    // set the parent path, actually the first entry, not the best way, but a good start
		h.vars.host_parent_path=get_object(TYPE,h.vars.host_parents[0]).vars.host_parent_path+"/"+get_object(TYPE,h.vars.host_parents[0]).__name;
		if ( ! res.contains(h.name)) { // test if the 
		   res.add(h.name); // 
		}
		notFinish = true; // not really finish, another roundtrip
              };
        };
   };

   // set the root path to empty prefix for all root nodes
   for ( h in roots ) {
       get_object(TYPE,h).vars.host_parent_path="/";
   }
   var aTime=get_time()-aStartTime;
   log("ParentPath Summary: roots="+roots.len()+", nodes="+res.len()+" time:"+aTime);
   log("End ParentPathRebuild() "+TYPE.name); // info of the end
   return "ParentPath for "+TYPE.name+" roots: "+roots.len()+" "+TYPE.name+" objects: "+res.len()+" time:"+aTime; // return is the summary

}; // end of function ParentPathRebuild(TYPE)

}


