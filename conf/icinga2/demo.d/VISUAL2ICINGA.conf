#
# Author: Uwe Ebel ( kobmaki @ aol . com )
# Project: kobmon-build
# License: GPL v2
#
# DemoMod for Icinga2
# It use the icinga2 programm structure as objects
#

# load some required functions
include "../function.d/function.HostParentPathRebuild.conf"
include "../function.d/function.IsObjectDerive.conf"
include "../function.d/function.Keys.conf"

# This is the dictionary that contains all required information
DEMOMOD = {}

# define types
DEMOMOD.set("Types",{});

DEMOMOD.set("Object",{});
DEMOMOD.set("NoObject",{});

DEMOMOD.set("ConfigObject",{});
DEMOMOD.set("NoConfigObject",{});

DEMOMOD.set("CustomVarObject",{});

# some special objects
DEMOMOD.set("SPECIALS",{});

# some types for Math, actual numbers, function
DEMOMOD.set("MathTypes",{});

DEMOMOD.set("globalsTypes",{});

DEMOMOD.set("SystemTypes",{});

DEMOMOD.set("STRUCTURE",{});

# for geo location, icingaweb2-module-map
DEMOMOD.set("GeoLocation",{
 # nuremberg
 "DEMOMOD" = "49.425409,11.079655",
 # bangkok
 "System" = "13.756331,100.501765",
 # new york
 "Math" = "40.712784,-74.005941",
 # buenos aires
 "CheckComand" = "-34.603684,-58.381559",
 # london
 "Type" = "51.507351,-0.127758",
 # sydney
 "globals" = "-33.865143,151.209900",
});

# Template for GEOMAP
template Host "template-DEMOMOD-GEOMAP" {
 # vars.geolocation={{ DEMOMOD.get("GeoLocation").get(vars.ityp) }}
}

# Template for usage, include geomap
template Host "template-DEMOMOD" {
  address = "127.0.0.1"
  check_command = "dummy"
  vars.host_parents = []
#  vars.host_parent_path = ""
  vars.templates_count = templates.len();
  vars.demomod = "DEMOMOD";

  if (name != "DEMOMOD" && vars.ityp != "STRUCTURE") {
    vars.ityp=name.reverse().split(".")[0].reverse()
  }

 import "template-DEMOMOD-GEOMAP"

 vars.geolocation = DEMOMOD.get("GeoLocation").get(vars.ityp)
 icon_image_alt = vars.ityp+", "+vars.ityp_sub+", DEMOMOD"
}

#
# Special Elements
#
for ( x in ["Object","ConfigObject","CustumVarObject"]) {
  DEMOMOD.get("STRUCTURE").set(x,true);
}

for ( x in ["Type","System","Math","globals","STRUCTURE"]) {
  DEMOMOD.get("SPECIALS").set(x,true);
}

#
#
#
for ( x in  globals.keys() ) {
  DEMOMOD.get("Types").set(typeof(globals.get(x)).name,true)
}

#
# All types from globals
#
for (x in keys(globals)) {
  DEMOMOD.get("globalsTypes").set(typeof(globals.get(x)).name,true)
}

#
# All type from Math
#
for (x in keys(Math)) {
  DEMOMOD.get("MathTypes").set(typeof(Math.get(x)).name,true)
}

#
# All types from System
#
for (x in keys(System)) {
  DEMOMOD.get("SystemTypes").set(typeof(System.get(x)).name,true)
}


for ( x in Types.keys() ) {

    var y = Types.get(x);

    if ( IsObjectDerive(y, Object) ) {
       DEMOMOD.get("Object").set(x,true);
    }

    if ( IsObjectDerive(y, ConfigObject) ) {
       DEMOMOD.get("ConfigObject").set(x,true);
    }

    if ( IsObjectDerive(y, CustomVarObject) ) {
       DEMOMOD.get("CustomVarObject").set(x,true);
    }

    if ( ! IsObjectDerive(y, ConfigObject) ) {
       DEMOMOD.get("NoConfigObject").set(x,true);
    }

   if ( ! IsObjectDerive(y, Object) ) {
      DEMOMOD.get("NoObject").set(x,true);
   }

}

#
# The root object for DEMOMOD
#
object Host "DEMOMOD" {
  import "template-DEMOMOD"
  vars.ityp="STRUCTURE"
}


#
# Define the structure and hostgroup
#
for ( x in DEMOMOD.get("SPECIALS").keys() ) {

  object Host x+".ICINGA2" {
    import "template-DEMOMOD"
    vars.ityp="STRUCTURE"
    vars.host_parents=["DEMOMOD"];
  }

  object HostGroup "DEMOMOD-"+x use(x) {
       display_name = "DEMOMOD "+x
       assign where match(host.vars.ityp, x );
 }

}

#
# create globals structure
#
for ( x in DEMOMOD.get("globalsTypes").keys() ) {
  object Host x+".globals" {
    import "template-DEMOMOD"
    vars.ityp="STRUCTURE"
    vars.host_parents=["globals.ICINGA2"];
  }
}

#
# globals objects
#

for ( i in globals.keys() ) {
  object Host i+".globals" use(i) {
    import "template-DEMOMOD"
    display_name = i+" (globals)"
    vars.ityp_sub=typeof(globals.get(i)).name
    vars.ityp_keys=[]
    if (vars.ityp_sub=="Dictionary" || vars.ityp_sub=="Array") {
      vars.ityp_keys=Keys(globals.get(i))
    }
    vars.host_parents=[typeof(globals.get(i)).name+".globals"]
  }
}



for ( aType in DEMOMOD.get("Types").keys() ) {

  object Host aType+".ICINGA2" use (aType) {
    import "template-DEMOMOD"
    vars.host_parents = [ "DEMOMOD" ]
    vars.ityp_sub=aType
  }

  object HostGroup "DEMOMOD-"+aType use(aType) {
       display_name = "DEMOMOD "+aType
       assign where match(aType,host.vars.ityp_sub)
 }

}

#
# types object
#
for ( aType in keys(Types) ) {

  object Host aType+".Type" use(aType) {
           import "template-DEMOMOD"
           display_name = name+" "+aType+" (Type)"
	   vars.ityp="Type"
	   vars.ityp_sub=typeof(Types.get(aType)).name

           if ( Types.get(aType).base.name ) {
              vars.host_parents += [ Types.get(aType).base.name+".Type" ]
           }

           if ( ! Types.get(aType).base.name ) {
              vars.host_parents += [ "Type.ICINGA2" ]
           }

           if (IsObjectDerive(Types.get(aType),"ConfigObject")) {
	          vars.ityp_count=get_objects(Types.get(aType)).len(); # function len() from ConfigObject
           }
	    
    }
}

#
# System
#

for ( i in keys(System)) {
  object Host i+".System" use(i) {
     import "template-DEMOMOD"
     display_name= i+" (System)"
     vars.host_parents+=["System.ICINGA2"]
     vars.system_type=typeof(System.get(i)).name
     vars.ityp_sub=typeof(System.get(i)).name
    }

}

#
# Math
#

for (x in DEMOMOD.get("MathTypes").keys()) {
  object Host x+".Math" use(x) {
     import "template-DEMOMOD"
     display_name= x+" Math"
     vars.ityp="STRUCTURE"
     vars.host_parents+=["Math.ICINGA2"]
  }
}


for ( i in keys(Math)) {
  object Host i+".Math" use(i) {
     import "template-DEMOMOD"
     display_name= i+" (Math)"
     vars.host_parents+=[typeof(Math.get(i)).name+".Math"]
     vars.math_type=typeof(Math.get(i)).name
     vars.ityp_sub=typeof(Math.get(i)).name
     if (vars.ityp_sub=="Dictionay" || vars.ityp_sub=="Array") {
        vars.ityp_keys=Keys(Math.get(i))
     }
  }
}

#
# The following two loop for object contruction doens't work
# as the get_objects() is empty. This is for TimePeriod, CheckCommand

#
# TimePeriod
#

for ( q in range(System.get_objects(TimePeriod).len())) {
  var aTP=get_objects(TimePeriod)[q]
  object Host aTP.name+".TimePeriod" use(aTP) {
    import "template-DEMOMOD"
    display_name = aTP.name+" (TimePeriod)"
    vars.host_parents+=[ "TimePeriod.ICINGA2"]
    vars.templates=aTP.templates
  }
}

#
# CheckCommand
#

for ( y in get_objects(CheckCommand)) {
  object Host y.name+".CheckCommand" use(y) {
    import "template-DEMOMOD"
    display_name = y.name+" (CheckCommand)"
    vars.ityp = CheckCommand.name
    vars.templates = y.templates
    vars.host_parents+=[ CheckCommand.name+".Type"]
  }
}



#
# Dependency set
#

apply Dependency "HostParent." for (aHost in host.vars.host_parents) to Host {
#  import "generic-dependency"
  parent_host_name = aHost;
  disable_checks = false;
  assign where host.vars.host_parents;
  ignore where match(aHost,"");
  ignore where ! get_object(Host,aHost);
}

#
# Calculate the host_parent_path
#
apply Dependency "ParentPathRebuild" to Host {
 HostParentPathRebuild();
 assign where host.name=="DEMOMOD";
}
