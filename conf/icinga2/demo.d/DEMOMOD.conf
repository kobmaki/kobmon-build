##
# Author: Uwe Ebel ( kobmaki @ aol . com )
# Project: kobmon-build
# License: GPL v2
#
# DemoMod for Icinga2
# It use the icinga2 programm structure as objects
#

# load some required functions
#
include "../function.d/function.HostParentPathRebuild.conf"
include "../function.d/function.IsObjectDerive.conf"
include "../function.d/function.Keys.conf"
include "../function.d/function.PrototypeFunctions.conf"
include "../function.d/function.HasIntersectionArrayDictionary.conf"
include "../function.d/function.HostServicesStateWorst.conf"

# This is the dictionary that contains all required information
DEMOMOD = {}

function DemoModGetMapIcon(A) {
   return "host";
}
#var Z=[]; for (k in Types.keys()){ Z=union(Z,PrototypeFunctions(Types.get(k))) ; }
# define types
DEMOMOD.set("Types",{});

DEMOMOD.set("Object",{});
DEMOMOD.set("NoObject",{});

DEMOMOD.set("ConfigObject",{});
DEMOMOD.set("NoConfigObject",{});

DEMOMOD.set("CustomVarObject",{});

# some special objects
DEMOMOD.set("SPECIALS",{});

# some types for Math, actual numbers, function
DEMOMOD.set("MathTypes",{});

DEMOMOD.set("globalsTypes",{});

DEMOMOD.set("SystemTypes",{});

# for structure things
DEMOMOD.set("STRUCTURE",{});

DEMOMOD.set("Prototype_Functions",{});
# all prototype functions, if the word "keys" results in an error later, so we name it "key"
DEMOMOD.set("Prototype_Functions",{"add"=true, "all"=true, "any"=true, "call"=true, "callv"=true, "clear"=true, "clone"=true, "contains"=true, "filter"=true, "find"=true, "format"=true, "get"=true, "join"=true, "key"=true, "len"=true, "lower"=true, "map"=true, "modify_attribute"=true, "notify_attribute"=true, "reduce"=true, "register_attribute_handler"=true, "remove"=true, "replace"=true, "restore_attribute"=true, "reverse"=true, "set"=true, "shallow_clone"=true, "sort"=true, "split"=true, "substr"=true, "to_string"=true, "trim"=true, "unique"=true, "upper"=true, "values"=true });

# for geo location, icingaweb2-module-map
DEMOMOD.set("GeoLocation",{
 # nuremberg
 "DEMOMOD" = "49.425409,11.079655",
 # bangkok
 "System" = "13.756331,100.501765",
 # new york
 "Math" = "40.712784,-74.005941",
 # buenos aires
 "CheckComand" = "-34.603684,-58.381559",
 # london
 "Type" = "51.507351,-0.127758",
 # sydney
 "globals" = "-33.865143,151.209900",
 # TODO
 "Function" = "20.0, 40",
});

# Url links, initial for documentation
DEMOMOD.set("URL",{
 "Icinga2Doc" = "https://www.icinga.com/docs/icinga2/latest/doc/",
 "Icinga2DocLibraryReference" = "https://www.icinga.com/docs/icinga2/latest/doc/18-library-reference/",
 "Icinga2DocObjectTypes" = "https://github.com/Icinga/icinga2/blob/master/doc/09-object-types.md",
});


# Template for GEOMAP
template Host "template-Host-DEMOMOD-GEOMAP" {
 # vars.geolocation={{ DEMOMOD.get("GeoLocation").get(vars.data_from) }}
}

#
# Template Host for structure
#
template Host "template-Host-DEMOMOD-STRUCTURE" {
  vars.structure = "STRUCTURE"
}

# Template for usage, include geomap
template Host "template-Host-DEMOMOD" {
  import "generic-host"
#  address = "127.0.0.1"
  check_command = "dummy"
  vars.host_parents = []
  enable_notifications = false
  enable_flapping = true
  check_interval = 40
  retry_interval = 20
  max_check_attempts = 2
#  vars.host_parent_path = ""
  vars.templates=templates
  vars.templates_count = templates.len()
  vars.demomod = "DEMOMOD"
  vars.dummy_state = {{ HostServicesStateWorst(host) }}
#  vars.prototypes=[];

  if (name != "DEMOMOD" && ! vars.structure ) {
    vars.data_from=name.reverse().split(".")[0].reverse()
     notes_url= "https://github.com/Icinga/icinga2/blob/master/doc/18-library-reference.md#"
     notes_url+= name.split(".")[0].lower()
     if (! match("System",name.split(".")[1])) {
       notes_url+= name.split(".")[1].lower()
      }

     if ( match("Math",name.split(".")[1])) {
       notes_url="https://github.com/Icinga/icinga2/blob/master/doc/18-library-reference.md#math"+ name.split(".")[0].lower()
      }

      if ( match("Type",name.split(".")[1]) ) {
           notes_url="https://github.com/Icinga/icinga2/blob/master/doc/09-object-types.md#"+name.split(".")[0].lower()
      }

     notes_url+="-"
     notes = "Icinga2 docu on github"
  }

  import "template-Host-DEMOMOD-GEOMAP"

  vars.geolocation = DEMOMOD.get("GeoLocation").get(vars.data_from)

  # vars.map_icon={{{ return  DemoModGetMapIcon(host) }}}
  icon_image_alt = vars.data_from+", "+vars.data_typeof+", DEMOMOD"

}


#
# Service template for DEMOMOD
#
template Service "template-Service-DEMOMOD" {
  import "generic-service"
  enable_notifications = false
  enable_flapping = true
}

#
# Special Elements
#
for ( x in ["Object","ConfigObject","CustumVarObject"]) {
  DEMOMOD.get("STRUCTURE").set(x,true);
}

for ( x in ["Types","System","Math","globals","locals","STRUCTURE"]) {
  DEMOMOD.get("SPECIALS").set(x,true);
}

#
#
#
for ( x in  Types.keys() ) {
  var aT=Types.get(x)
 # DEMOMOD.get("Types").set(aT.name,true);
  DEMOMOD.Types.set(aT.name,true);
   for ( y in PrototypeFunctions(aT) ) {
 # DOESN'T WORK
 #        DEMOMOD.get("Prototype_Functions").set(y,true);
 # WORKS BUT WRONG
# DEMOMOD.Prototype_Functions.set(y,true);
 }
}


#
# All types from globals
#
for (x in keys(globals)) {
  DEMOMOD.get("globalsTypes").set(typeof(globals.get(x)).name,true)
}

#
# All type from Math
#
for (x in keys(Math)) {
  DEMOMOD.get("MathTypes").set(typeof(Math.get(x)).name,true)
}

#
# All types from System
#
for (x in keys(System)) {
  DEMOMOD.get("SystemTypes").set(typeof(System.get(x)).name,true)
}


for ( x in Types.keys() ) {

    var y = Types.get(x);

    if ( IsObjectDerive(y, Object) ) {
       DEMOMOD.get("Object").set(x,true);
    }

    if ( IsObjectDerive(y, ConfigObject) ) {
       DEMOMOD.get("ConfigObject").set(x,true);
    }

    if ( IsObjectDerive(y, CustomVarObject) ) {
       DEMOMOD.get("CustomVarObject").set(x,true);
    }

    if ( ! IsObjectDerive(y, ConfigObject) ) {
       DEMOMOD.get("NoConfigObject").set(x,true);
    }

   if ( ! IsObjectDerive(y, Object) ) {
      DEMOMOD.get("NoObject").set(x,true);
   }

}

#
# The root object for DEMOMOD
#
object Host "DEMOMOD" {
  import "template-Host-DEMOMOD"
  import "template-Host-DEMOMOD-STRUCTURE"
}


#
# Define the structure and hostgroup
#
for ( x in DEMOMOD.get("SPECIALS").keys() ) {

  object Host x+".ICINGA2" {
    import "template-Host-DEMOMOD"
    import "template-Host-DEMOMOD-STRUCTURE"
    vars.host_parents=["DEMOMOD"];
  }

  object HostGroup "DEMOMOD-"+x use(x) {
       display_name = "DEMOMOD "+x
       assign where match(host.vars.data_from, x );
 }

}

#
# create globals structure
#
for ( x in DEMOMOD.get("globalsTypes").keys() ) {
  object Host x+".globals" {
    import "template-Host-DEMOMOD"
    import "template-Host-DEMOMOD-STRUCTURE"
    vars.host_parents=["globals.ICINGA2"];
  }
}

#
# globals objects
#

for ( i in globals.keys() ) {
  object Host i+".globals" use(i) {
    import "template-Host-DEMOMOD"
    display_name = i+" (globals)"
    vars.data_typeof=typeof(globals.get(i)).name
    vars.data_from_keys=[]
    if (vars.data_typeof=="Dictionary" || vars.data_typeof=="Array") {
      vars.data_from_keys=Keys(globals.get(i))
    }

    vars.host_parents=[typeof(globals.get(i)).name+".globals"]

    vars.prototypes=PrototypeFunctions(typeof(globals.get(i)))
    vars.prototypes_services=","+vars.prototypes.join(",")+","
    vars.prototypes_count= vars.prototypes.len()

  }
}




#
# types object and hostgroup
#
for ( aType in  DEMOMOD.get("Types").keys() ) {

  object Host aType+".Type" use(aType) {
           import "template-Host-DEMOMOD"
           display_name = name+" (Type)"
	   vars.data_from ="Type"
	   vars.data_typeof = aType

           if ( Types.get(aType).base.name ) {
              vars.host_parents += [ Types.get(aType).base.name+".Type" ]
           }

           if ( ! Types.get(aType).base.name ) {
              vars.host_parents += [ "Type.ICINGA2" ]
           }

           if (IsObjectDerive(Types.get(aType),"ConfigObject")) {
	          vars.data_from_count=get_objects(Types.get(aType)).len(); # function len() from ConfigObject
           }
      vars.prototypes=PrototypeFunctions(Types.get(aType))
      vars.prototypes_count= vars.prototypes.len()	
      vars.prototypes_services=","+vars.prototypes.join(",")+","
    }

  object HostGroup "DEMOMOD-"+aType use(aType) {
       display_name = "DEMOMOD "+aType
       assign where match(aType,host.vars.data_typeof)
 }
}

#
# System
#

for ( i in keys(System)) {
  object Host i+".System" use(i) {
     import "template-Host-DEMOMOD"
     display_name= i+" (System)"
     vars.host_parents+=["System.ICINGA2"]
     vars.system_type=typeof(System.get(i)).name
     vars.data_typeof=typeof(System.get(i)).name
     vars.prototypes=PrototypeFunctions(typeof(System.get(i)))
     vars.prototypes_count= vars.prototypes.len()
     vars.prototypes_services=","+vars.prototypes.join(",")+","
    }

}

#
# Math
#

for (x in DEMOMOD.get("MathTypes").keys()) {
  object Host x+".Math" use(x) {
     import "template-Host-DEMOMOD"
     import "template-Host-DEMOMOD-STRUCTURE"
     display_name= x+" Math"
#     vars.data_from="STRUCTURE"
     vars.host_parents+=["Math.ICINGA2"]
  }
}


for ( i in keys(Math) ) {
  object Host i+".Math" use(i) {
     import "template-Host-DEMOMOD"
     display_name= i+" (Math)"
     vars.host_parents+=[typeof(Math.get(i)).name+".Math"]
     vars.data_typeof=typeof(Math.get(i)).name

    if ( vars.data_typeof==Number.name ) {
      vars.math_value=Math.get(i);
    }

    vars.prototypes=PrototypeFunctions(typeof(Math.get(i)))
    vars.prototypes_count= vars.prototypes.len()
    vars.prototypes_services=","+vars.prototypes.join(",")+","

  }
}

#
# The following two loop for object contruction doens't work
# as the get_objects() is empty. This is for TimePeriod, CheckCommand

#
# TimePeriod
#

for ( q in range(System.get_objects(TimePeriod).len())) {
  var aTP=get_objects(TimePeriod)[q]
  object Host aTP.name+".TimePeriod" use(aTP) {
    import "template-Host-DEMOMOD"
    display_name = aTP.name+" (TimePeriod)"
    vars.host_parents+=[ "TimePeriod.ICINGA2"]
    vars.templates=aTP.templates
  }
}

#
# CheckCommand
#

for ( y in get_objects(CheckCommand)) {
  object Host y.name+".CheckCommand" use(y) {
    import "template-Host-DEMOMOD"
    display_name = y.name+" (CheckCommand)"
    vars.data_from = CheckCommand.name
    vars.templates = y.templates
    vars.host_parents+=[ CheckCommand.name+".Type"]
  }
}



#
# Create service checks
#
for ( y in DEMOMOD.Prototype_Functions.keys() ) {

  apply Service "Prototype-"+y use(y) {
    import "template-Service-DEMOMOD"
    display_name = y+" from prototype (DEMOMOD)"
    check_command = "dummy"
    vars.dummy_text = host.vars.data_from +" "+host.vars.data_typeof

    # now the "magic" of the state, for 450 secondes OK, then 150 up to  warning, 150 up to critical
    # and last up to unknown
    vars.dummy_state = {{ var aTimeMod=DateTime().value%900; var aMaxService=ServiceCritical; if ( aTimeMod < 450) { return 0 }; if ( aTimeMod < 600) { aMaxService=ServiceWarning};  if ( aTimeMod > 850 ) { aMaxService=ServiceUnknown };  if ( aTimeMod > 450 ) {  return Math.round(Math.random ()*aMaxService ) }  }}
    assign where match("*,"+y+",*",host.vars.prototypes_services)
   }

}

#
# Define ServiceGroup for prototype function
#

for ( y in DEMOMOD.Prototype_Functions.keys() ) {

  object ServiceGroup "DEMOMOD-Prototype-"+y use(y) {
    assign where service.name=="Prototype-"+y
  }

}

#
# Dependency set
#
#  the ignore_on_error doesn't work, bug?

apply Dependency "XHostParent." for (aHost in host.vars.host_parents) to Host ignore_on_error {
#  import "generic-dependency"
  parent_host_name = aHost;
  disable_checks = false;
  assign where host.vars.host_parents && ! get_object(Dependency,Host.name+"!XHostParent."+aHost);
  ignore where match(aHost,"");
  ignore where ! get_object(Host,aHost);

  # can't access to the dependency object in the this config state
  #assign where ! get_object(Dependency,Host.name+"!HostParent."+aHost);
  #ignore where get_object(Dependency,Host.name+"!HostParent."+aHost);
}

#
# Calculate the host_parent_path
#
apply Dependency "ParentPathRebuild" to Host {
 HostParentPathRebuild();
 assign where host.name=="DEMOMOD";
}
