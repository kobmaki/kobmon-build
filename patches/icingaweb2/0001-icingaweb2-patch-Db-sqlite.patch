diff --git a/application/forms/Config/Resource/DbResourceForm.php b/application/forms/Config/Resource/DbResourceForm.php
index 89fe75f15..127125580 100644
--- a/application/forms/Config/Resource/DbResourceForm.php
+++ b/application/forms/Config/Resource/DbResourceForm.php
@@ -45,11 +45,15 @@ class DbResourceForm extends Form
         if (Platform::hasOciSupport()) {
             $dbChoices['oci'] = 'Oracle (OCI8)';
         }
+        if (Platform::hasSqliteSupport()) {
+            $dbChoices['sqlite'] = 'Sqlite';
+        }
 
         $offerSsl = false;
         $offerPostgres = false;
         $offerIbm = false;
         $offerMysql = false;
+        $offerSqlite = false;
         $dbChoice = isset($formData['db']) ? $formData['db'] : key($dbChoices);
         if ($dbChoice === 'pgsql') {
             $offerPostgres = true;
@@ -60,6 +64,8 @@ class DbResourceForm extends Form
             }
         } elseif ($dbChoice === 'ibm') {
             $offerIbm = true;
+        } elseif ($dbChoice === 'sqlite') {
+            $offerSqlite = true;
         }
 
         $socketInfo = '';
@@ -93,28 +99,30 @@ class DbResourceForm extends Form
                 'multiOptions'  => $dbChoices
             )
         );
-        $this->addElement(
-            'text',
-            'host',
-            array (
-                'required'      => true,
-                'label'         => $this->translate('Host'),
-                'description'   => $this->translate('The hostname of the database')
-                    . ($socketInfo ? '. ' . $socketInfo : ''),
-                'value'         => 'localhost'
-            )
-        );
-        $this->addElement(
-            'number',
-            'port',
-            array(
-                'description'       => $this->translate('The port to use'),
-                'label'             => $this->translate('Port'),
-                'preserveDefault'   => true,
-                'required'          => $offerPostgres,
-                'value'             => $offerPostgres ? 5432 : null
-            )
-        );
+        if ($dbChoice != 'sqlite') {
+             $this->addElement(
+                'text',
+                'host',
+                array (
+                    'required'      => true,
+                    'label'         => $this->translate('Host'),
+                    'description'   => $this->translate('The hostname of the database')
+                        . ($socketInfo ? '. ' . $socketInfo : ''),
+                    'value'         => 'localhost'
+                )
+            );
+            $this->addElement(
+                'number',
+                'port',
+                array(
+                    'description'       => $this->translate('The port to use'),
+                    'label'             => $this->translate('Port'),
+                    'preserveDefault'   => true,
+                    'required'          => $offerPostgres,
+                    'value'             => $offerPostgres ? 5432 : null
+                )
+            );
+        };
         $this->addElement(
             'text',
             'dbname',
@@ -124,24 +132,27 @@ class DbResourceForm extends Form
                 'description'   => $this->translate('The name of the database to use')
             )
         );
-        $this->addElement(
-            'text',
-            'username',
-            array (
-                'required'      => true,
-                'label'         => $this->translate('Username'),
-                'description'   => $this->translate('The user name to use for authentication')
-            )
-        );
-        $this->addElement(
-            'password',
-            'password',
-            array(
-                'renderPassword'    => true,
-                'label'             => $this->translate('Password'),
-                'description'       => $this->translate('The password to use for authentication')
-            )
-        );
+        if ($dbChoice != 'sqlite') {
+            $this->addElement(
+                'text',
+                'username',
+                array (
+                    'required'      => true,
+                    'label'         => $this->translate('Username'),
+                    'description'   => $this->translate('The user name to use for authentication')
+                )
+            );
+            $this->addElement(
+                'password',
+                'password',
+                array(
+                    'required'          => true,
+                    'renderPassword'    => true,
+                    'label'             => $this->translate('Password'),
+                    'description'       => $this->translate('The password to use for authentication')
+                )
+            );
+        };
         $this->addElement(
             'text',
             'charset',
@@ -217,6 +228,8 @@ class DbResourceForm extends Form
                     )
                 );
             }
+        } elseif ($dbChoice === 'sqlite') {
+            $offerSqlite = true;
         }
 
         return $this;
diff --git a/library/Icinga/Application/Platform.php b/library/Icinga/Application/Platform.php
index 21ef47d52..af68829a8 100644
--- a/library/Icinga/Application/Platform.php
+++ b/library/Icinga/Application/Platform.php
@@ -413,4 +413,17 @@ class Platform
     {
         return static::extensionLoaded('pdo_pgsql') && static::classExists('Zend_Db_Adapter_Pdo_Pgsql');
     }
+
+    /**
+     * Return whether it's possible to connect to a Sqlite database
+     *
+     * Checks whether the sqlite pdo extension has been loaded and the Zend framework adapter for SQLITE is available
+     *
+     * @return  bool
+     */
+
+    public static function hasSqliteSupport()
+    {
+        return static::extensionLoaded('pdo_sqlite') && static::classExists('Zend_Db_Adapter_Pdo_Sqlite');
+    }
 }
diff --git a/library/Icinga/Data/Db/DbConnection.php b/library/Icinga/Data/Db/DbConnection.php
index a52ffc388..7a58da213 100644
--- a/library/Icinga/Data/Db/DbConnection.php
+++ b/library/Icinga/Data/Db/DbConnection.php
@@ -207,6 +207,10 @@ class DbConnection implements Selectable, Extensible, Updatable, Reducible, Insp
                 $adapter = 'Pdo_Ibm';
                 $defaultPort = 50000;
                 break;
+            case 'sqlite':
+                $adapter = 'Pdo_Sqlite';
+                $defaultPort = 0; // dummy port, as a value is required
+                break;
             default:
                 throw new ConfigurationError(
                     'Backend "%s" is not supported',
